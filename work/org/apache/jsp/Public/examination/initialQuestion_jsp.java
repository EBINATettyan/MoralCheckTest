/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.32
 * Generated at: 2018-10-22 12:40:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Public.examination;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import beans.InitialQuestion;

public final class initialQuestion_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("beans.InitialQuestion");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	InitialQuestion initialQuestion = (InitialQuestion) session.getAttribute("initialQuestion");
	int countId = (Integer) request.getAttribute("countId");

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ja\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<title>テスト画面</title>\r\n");
      out.write("<link href=\"../common/bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("<link href=\"../common/css/original.css\" rel=\"stylesheet\" />\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t\t<nav class=\"navbar navbar-default navbar-fixed-top\" id=\"navbar_overall\">\r\n");
      out.write("\t\t\t<div class=\"navbar-header\">\r\n");
      out.write("\t\t\t\t<a class=\"navbar-brand\" id=\"navbar_text_left_side\"><img src=\"../../img/titleSmall.png\"></a>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<nav class=\"collapse navbar-collapse\">\r\n");
      out.write("\t\t\t\t<ul class=\"nav navbar-nav pull-right\">\r\n");
      out.write("\t\t\t\t\t<li class=\"navbar-text\"><span class=\"navbar_text_right_side\"><i class=\"fa fa-clock-o\" aria-hidden=\"true\"></i>&nbsp; <script>\r\n");
      out.write("\t\t\t\t\t\t//localStrageに保存された受検時間を取得\r\n");
      out.write("\t\t\t\t\t\tvar sec = Number(window.localStorage\r\n");
      out.write("\t\t\t\t\t\t\t\t.getItem('secLocalStrage'));\r\n");
      out.write("\t\t\t\t\t\tvar min = Number(window.localStorage\r\n");
      out.write("\t\t\t\t\t\t\t\t.getItem('minLocalStrage'));\r\n");
      out.write("\t\t\t\t\t\tvar hour = Number(window.localStorage\r\n");
      out.write("\t\t\t\t\t\t\t\t.getItem('hourLocalStrage'));\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t// 0埋め\r\n");
      out.write("\t\t\t\t\t\tsecNumber = ('0' + sec).slice(-2);\r\n");
      out.write("\t\t\t\t\t\tminNumber = ('0' + min).slice(-2);\r\n");
      out.write("\t\t\t\t\t\thourNumber = ('0' + hour).slice(-2);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t//\t受検時間の表示\r\n");
      out.write("\t\t\t\t\t\tdocument.write('<span id=timer>' + hourNumber + ':'\r\n");
      out.write("\t\t\t\t\t\t\t\t+ minNumber + ':' + secNumber + '</span>');\r\n");
      out.write("\t\t\t\t\t</script> </span></li>\r\n");
      out.write("\t\t\t\t</ul>\r\n");
      out.write("\t\t\t</nav>\r\n");
      out.write("\t\t</nav>\r\n");
      out.write("\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t<div class=\"col-sm-12 col-md-12 col-lg-10 col-lg-offset-1\">\r\n");
      out.write("\t\t\t\t<div class=\"panel panel-info\">\r\n");
      out.write("\t\t\t\t\t<div class=\"panel-heading\">\r\n");
      out.write("\t\t\t\t\t\t<font size=\"5\"> ");

 	out.println(countId + "問目");
 
      out.write("\r\n");
      out.write("\t\t\t\t\t\t</font>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t<div class=\"panel-body\">\r\n");
      out.write("\t\t\t\t\t\t<div style=\"display: none\" id=\"warnning\">\r\n");
      out.write("\t\t\t\t\t\t\t<span style='color: #ff0000'>＊答えを選択してください</span>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<div>\r\n");
      out.write("\t\t\t\t\t\t\t<font size=\"3\">&nbsp; ");

 	out.println(initialQuestion.getContent() + "");
 
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t</font>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<br>\r\n");
      out.write("\t\t\t\t\t\t<form method=\"POST\" action=\"SelectQuestionServlet\">\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"well well-sm\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<label><input type='radio' name='answer' value='1' />&nbsp;&nbsp; ");

 	out.println(initialQuestion.getChoice1());
 
      out.write("</label>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"well well-sm\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<label><input type='radio' name='answer' value='2' />&nbsp;&nbsp; ");

 	out.println(initialQuestion.getChoice2());
 
      out.write("</label>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"well well-sm\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<label><input type='radio' name='answer' value='3' />&nbsp;&nbsp; ");

 	out.println(initialQuestion.getChoice3());
 
      out.write("</label>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"well well-sm\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<label><input type='radio' name='answer' value='4' />&nbsp;&nbsp; ");

 	out.println(initialQuestion.getChoice4());
 
      out.write("</label>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t<input type='hidden' name='countId' value=");
out.println(countId);
      out.write("> <input type=\"submit\" class=\"btn btn-primary btn-lg\"\r\n");
      out.write("\t\t\t\t\t\t\t\tid=\"answer_button\" value=\"答える\">\r\n");
      out.write("\t\t\t\t\t\t</form>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"></script>\r\n");
      out.write("<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js\"></script>\r\n");
      out.write("<script src=\"../common/js/countUpTimer.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\t$(window).load(function() {//ページが読みこまれた後に，実行する処理\r\n");
      out.write("\t\t//0.01秒後に処理を実行\r\n");
      out.write("\t\tsetInterval(function() {\r\n");
      out.write("\t\t\t//URLにハッシュを付ける\r\n");
      out.write("\t\t\tlocation.hash = \"hash\";\r\n");
      out.write("\t\t}, 10);\r\n");
      out.write("\t});\r\n");
      out.write("\t$(function() {\r\n");
      out.write("\t\t$('#answer_button').on('click', function() {//解答ボタンを押した際に選択肢が選択されていなかった場合に警告を出す．\r\n");
      out.write("\t\t\tvar radioChecked = $('[name=answer]:checked').val();\r\n");
      out.write("\t\t\tif (!radioChecked) {\r\n");
      out.write("\t\t\t\t$('#warnning').css('display', '');\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t$('input[name=answer]').on('click', function() {//選択肢を選択した場合，警告を消す．\r\n");
      out.write("\t\t\t$('#warnning').css('display', 'none');\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
